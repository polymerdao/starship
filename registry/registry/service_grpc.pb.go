// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: registry/service.proto

package registry

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Registry_ListChainIDs_FullMethodName   = "/registry.Registry/ListChainIDs"
	Registry_ListChains_FullMethodName     = "/registry.Registry/ListChains"
	Registry_GetChain_FullMethodName       = "/registry.Registry/GetChain"
	Registry_GetChainKeys_FullMethodName   = "/registry.Registry/GetChainKeys"
	Registry_ListChainPeers_FullMethodName = "/registry.Registry/ListChainPeers"
	Registry_ListChainAPIs_FullMethodName  = "/registry.Registry/ListChainAPIs"
	Registry_GetChainAssets_FullMethodName = "/registry.Registry/GetChainAssets"
	Registry_ListIBC_FullMethodName        = "/registry.Registry/ListIBC"
	Registry_ListChainIBC_FullMethodName   = "/registry.Registry/ListChainIBC"
	Registry_GetIBCInfo_FullMethodName     = "/registry.Registry/GetIBCInfo"
)

// RegistryClient is the client API for Registry service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistryClient interface {
	// ListChainIDs will return all the ids for registered chains
	ListChainIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseChainIDs, error)
	// ListChains will fetch all the current chain.json for
	// the registered chains in registry
	ListChains(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseChains, error)
	GetChain(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*ChainRegistry, error)
	GetChainKeys(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*Keys, error)
	// ListChainPeers will fetch all the nodes and addresses
	ListChainPeers(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*Peers, error)
	// ListChainAPIs will fetch all the nodes and addresses
	ListChainAPIs(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*APIs, error)
	GetChainAssets(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*ResponseChainAssets, error)
	// ListIBCs will fetch all the current IBC connections
	ListIBC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseListIBC, error)
	// ListChainIBC will fetch all the current IBC connections for the chain
	ListChainIBC(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*ResponseListIBC, error)
	// GetIBCInfo will fetch all the current IBC connections
	GetIBCInfo(ctx context.Context, in *RequestIBCInfo, opts ...grpc.CallOption) (*IBCData, error)
}

type registryClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistryClient(cc grpc.ClientConnInterface) RegistryClient {
	return &registryClient{cc}
}

func (c *registryClient) ListChainIDs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseChainIDs, error) {
	out := new(ResponseChainIDs)
	err := c.cc.Invoke(ctx, Registry_ListChainIDs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListChains(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseChains, error) {
	out := new(ResponseChains)
	err := c.cc.Invoke(ctx, Registry_ListChains_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetChain(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*ChainRegistry, error) {
	out := new(ChainRegistry)
	err := c.cc.Invoke(ctx, Registry_GetChain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetChainKeys(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*Keys, error) {
	out := new(Keys)
	err := c.cc.Invoke(ctx, Registry_GetChainKeys_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListChainPeers(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*Peers, error) {
	out := new(Peers)
	err := c.cc.Invoke(ctx, Registry_ListChainPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListChainAPIs(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*APIs, error) {
	out := new(APIs)
	err := c.cc.Invoke(ctx, Registry_ListChainAPIs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetChainAssets(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*ResponseChainAssets, error) {
	out := new(ResponseChainAssets)
	err := c.cc.Invoke(ctx, Registry_GetChainAssets_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListIBC(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseListIBC, error) {
	out := new(ResponseListIBC)
	err := c.cc.Invoke(ctx, Registry_ListIBC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) ListChainIBC(ctx context.Context, in *RequestChain, opts ...grpc.CallOption) (*ResponseListIBC, error) {
	out := new(ResponseListIBC)
	err := c.cc.Invoke(ctx, Registry_ListChainIBC_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registryClient) GetIBCInfo(ctx context.Context, in *RequestIBCInfo, opts ...grpc.CallOption) (*IBCData, error) {
	out := new(IBCData)
	err := c.cc.Invoke(ctx, Registry_GetIBCInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistryServer is the server API for Registry service.
// All implementations must embed UnimplementedRegistryServer
// for forward compatibility
type RegistryServer interface {
	// ListChainIDs will return all the ids for registered chains
	ListChainIDs(context.Context, *emptypb.Empty) (*ResponseChainIDs, error)
	// ListChains will fetch all the current chain.json for
	// the registered chains in registry
	ListChains(context.Context, *emptypb.Empty) (*ResponseChains, error)
	GetChain(context.Context, *RequestChain) (*ChainRegistry, error)
	GetChainKeys(context.Context, *RequestChain) (*Keys, error)
	// ListChainPeers will fetch all the nodes and addresses
	ListChainPeers(context.Context, *RequestChain) (*Peers, error)
	// ListChainAPIs will fetch all the nodes and addresses
	ListChainAPIs(context.Context, *RequestChain) (*APIs, error)
	GetChainAssets(context.Context, *RequestChain) (*ResponseChainAssets, error)
	// ListIBCs will fetch all the current IBC connections
	ListIBC(context.Context, *emptypb.Empty) (*ResponseListIBC, error)
	// ListChainIBC will fetch all the current IBC connections for the chain
	ListChainIBC(context.Context, *RequestChain) (*ResponseListIBC, error)
	// GetIBCInfo will fetch all the current IBC connections
	GetIBCInfo(context.Context, *RequestIBCInfo) (*IBCData, error)
	mustEmbedUnimplementedRegistryServer()
}

// UnimplementedRegistryServer must be embedded to have forward compatible implementations.
type UnimplementedRegistryServer struct {
}

func (UnimplementedRegistryServer) ListChainIDs(context.Context, *emptypb.Empty) (*ResponseChainIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChainIDs not implemented")
}
func (UnimplementedRegistryServer) ListChains(context.Context, *emptypb.Empty) (*ResponseChains, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChains not implemented")
}
func (UnimplementedRegistryServer) GetChain(context.Context, *RequestChain) (*ChainRegistry, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChain not implemented")
}
func (UnimplementedRegistryServer) GetChainKeys(context.Context, *RequestChain) (*Keys, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainKeys not implemented")
}
func (UnimplementedRegistryServer) ListChainPeers(context.Context, *RequestChain) (*Peers, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChainPeers not implemented")
}
func (UnimplementedRegistryServer) ListChainAPIs(context.Context, *RequestChain) (*APIs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChainAPIs not implemented")
}
func (UnimplementedRegistryServer) GetChainAssets(context.Context, *RequestChain) (*ResponseChainAssets, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChainAssets not implemented")
}
func (UnimplementedRegistryServer) ListIBC(context.Context, *emptypb.Empty) (*ResponseListIBC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListIBC not implemented")
}
func (UnimplementedRegistryServer) ListChainIBC(context.Context, *RequestChain) (*ResponseListIBC, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListChainIBC not implemented")
}
func (UnimplementedRegistryServer) GetIBCInfo(context.Context, *RequestIBCInfo) (*IBCData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetIBCInfo not implemented")
}
func (UnimplementedRegistryServer) mustEmbedUnimplementedRegistryServer() {}

// UnsafeRegistryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistryServer will
// result in compilation errors.
type UnsafeRegistryServer interface {
	mustEmbedUnimplementedRegistryServer()
}

func RegisterRegistryServer(s grpc.ServiceRegistrar, srv RegistryServer) {
	s.RegisterService(&Registry_ServiceDesc, srv)
}

func _Registry_ListChainIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListChainIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListChainIDs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListChainIDs(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListChains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListChains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListChains_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListChains(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetChain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetChain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_GetChain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetChain(ctx, req.(*RequestChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetChainKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetChainKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_GetChainKeys_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetChainKeys(ctx, req.(*RequestChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListChainPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListChainPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListChainPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListChainPeers(ctx, req.(*RequestChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListChainAPIs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListChainAPIs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListChainAPIs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListChainAPIs(ctx, req.(*RequestChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetChainAssets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetChainAssets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_GetChainAssets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetChainAssets(ctx, req.(*RequestChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListIBC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListIBC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListIBC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListIBC(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_ListChainIBC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestChain)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).ListChainIBC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_ListChainIBC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).ListChainIBC(ctx, req.(*RequestChain))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registry_GetIBCInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestIBCInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistryServer).GetIBCInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Registry_GetIBCInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistryServer).GetIBCInfo(ctx, req.(*RequestIBCInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// Registry_ServiceDesc is the grpc.ServiceDesc for Registry service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registry_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registry.Registry",
	HandlerType: (*RegistryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListChainIDs",
			Handler:    _Registry_ListChainIDs_Handler,
		},
		{
			MethodName: "ListChains",
			Handler:    _Registry_ListChains_Handler,
		},
		{
			MethodName: "GetChain",
			Handler:    _Registry_GetChain_Handler,
		},
		{
			MethodName: "GetChainKeys",
			Handler:    _Registry_GetChainKeys_Handler,
		},
		{
			MethodName: "ListChainPeers",
			Handler:    _Registry_ListChainPeers_Handler,
		},
		{
			MethodName: "ListChainAPIs",
			Handler:    _Registry_ListChainAPIs_Handler,
		},
		{
			MethodName: "GetChainAssets",
			Handler:    _Registry_GetChainAssets_Handler,
		},
		{
			MethodName: "ListIBC",
			Handler:    _Registry_ListIBC_Handler,
		},
		{
			MethodName: "ListChainIBC",
			Handler:    _Registry_ListChainIBC_Handler,
		},
		{
			MethodName: "GetIBCInfo",
			Handler:    _Registry_GetIBCInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "registry/service.proto",
}
