// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: faucet/service.proto

package faucet

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Faucet_Status_FullMethodName = "/faucet.Faucet/Status"
	Faucet_Credit_FullMethodName = "/faucet.Faucet/Credit"
)

// FaucetClient is the client API for Faucet service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FaucetClient interface {
	// Status endpoint
	Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*State, error)
	// Credit endpoint
	Credit(ctx context.Context, in *RequestCredit, opts ...grpc.CallOption) (*ResponseCredit, error)
}

type faucetClient struct {
	cc grpc.ClientConnInterface
}

func NewFaucetClient(cc grpc.ClientConnInterface) FaucetClient {
	return &faucetClient{cc}
}

func (c *faucetClient) Status(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*State, error) {
	out := new(State)
	err := c.cc.Invoke(ctx, Faucet_Status_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *faucetClient) Credit(ctx context.Context, in *RequestCredit, opts ...grpc.CallOption) (*ResponseCredit, error) {
	out := new(ResponseCredit)
	err := c.cc.Invoke(ctx, Faucet_Credit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FaucetServer is the server API for Faucet service.
// All implementations must embed UnimplementedFaucetServer
// for forward compatibility
type FaucetServer interface {
	// Status endpoint
	Status(context.Context, *emptypb.Empty) (*State, error)
	// Credit endpoint
	Credit(context.Context, *RequestCredit) (*ResponseCredit, error)
	mustEmbedUnimplementedFaucetServer()
}

// UnimplementedFaucetServer must be embedded to have forward compatible implementations.
type UnimplementedFaucetServer struct {
}

func (UnimplementedFaucetServer) Status(context.Context, *emptypb.Empty) (*State, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedFaucetServer) Credit(context.Context, *RequestCredit) (*ResponseCredit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Credit not implemented")
}
func (UnimplementedFaucetServer) mustEmbedUnimplementedFaucetServer() {}

// UnsafeFaucetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FaucetServer will
// result in compilation errors.
type UnsafeFaucetServer interface {
	mustEmbedUnimplementedFaucetServer()
}

func RegisterFaucetServer(s grpc.ServiceRegistrar, srv FaucetServer) {
	s.RegisterService(&Faucet_ServiceDesc, srv)
}

func _Faucet_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Faucet_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetServer).Status(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Faucet_Credit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestCredit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FaucetServer).Credit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Faucet_Credit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FaucetServer).Credit(ctx, req.(*RequestCredit))
	}
	return interceptor(ctx, in, info, handler)
}

// Faucet_ServiceDesc is the grpc.ServiceDesc for Faucet service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Faucet_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "faucet.Faucet",
	HandlerType: (*FaucetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Status",
			Handler:    _Faucet_Status_Handler,
		},
		{
			MethodName: "Credit",
			Handler:    _Faucet_Credit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "faucet/service.proto",
}
